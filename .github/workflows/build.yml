name: Build and Package

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  id-token: write  # Required for keyless signing with Cosign

jobs:
  build:
    name: Build, Test, and Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install semver CLI
        run: go install github.com/maykonlsf/semver-cli/cmd/semver@latest

      - name: Add Go bin directory to PATH
        run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Set version
        id: version
        run: |
          VERSION=""
          GIT_SHORT_SHA=$(git rev-parse --short HEAD)

          # Initialize semver if not already initialized
          if [[ ! -f .semver.yaml ]]; then
            semver init
          fi

          # Get the base version from semver
          BASE_VERSION=$(semver get release 2>/dev/null || echo "0.1.0")

          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v} # Remove v prefix
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            VERSION="$BASE_VERSION+build.$GIT_SHORT_SHA"
          else
            VERSION="$BASE_VERSION+build.$GIT_SHORT_SHA"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          install-mode: binary

      - name: Format Check
        run: |
          go fmt ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            exit 1
          fi

      - name: Lint
        run: golangci-lint run

      - name: Vet
        run: go vet ./...

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Install melange
        uses: chainguard-dev/actions/setup-melange@main

      - name: Install apko
        uses: chainguard-dev/actions/setup-apko@main

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build package with melange
        run: |
          # Generate a temporary key for melange build (will be discarded)
          cosign generate-key-pair --output-key-prefix tmp-melange

          melange build \
            --arch amd64,arm64 \
            --signing-key tmp-melange.key \
            --keyring-append tmp-melange.pub \
            --out-dir ./packages \
            --repository-append ./packages \
            --version ${{ steps.version.outputs.version }} \
            melange.yaml

      - name: Build image with apko
        run: |
          apko build \
            --keyring tmp-melange.pub \
            --arch amd64,arm64 \
            --repository ./packages \
            apko.yaml \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }} \
            image.tar \
            ghcr.io/${{ github.repository }}.json

      - name: Push image
        if: github.event_name != 'pull_request'
        run: |
          crane push image.tar ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          
          # Tag as latest if on main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            crane tag ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }} latest
          fi

      - name: Sign image with keyless signing
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          # Keyless signing using GitHub OIDC identity
          cosign sign ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}

          # Add attestation to record build information
          cosign attest --predicate <(cat ghcr.io/${{ github.repository }}.json) ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}

      - name: Verify image signature
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@${{ github.ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: ghcr.io/${{ github.repository }}.json