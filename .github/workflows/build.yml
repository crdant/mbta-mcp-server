name: Build and Package
# This workflow uses Chainguard actions for container builds with melange and apko

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  id-token: write  # Required for keyless signing with Cosign
  security-events: write  # Required for uploading SARIF results to GitHub Security tab
  actions: read  # Required for SBOM attestation

env:
  # Enable verbose debug output for GitHub Actions
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  # Enable debug mode for apko and melange
  APKO_VERBOSITY: 3  # Maximum debug verbosity
  MELANGE_VERBOSITY: 3  # Maximum debug verbosity

jobs:
  build:
    name: Build, Test, and Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Install semver CLI
        run: go install github.com/maykonlsf/semver-cli/cmd/semver@latest

      - name: Add Go bin directory to PATH
        run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Set version
        id: version
        run: |
          GIT_SHORT_SHA=$(git rev-parse --short HEAD)

          # Initialize semver if not already initialized
          if [[ ! -f .semver.yaml ]]; then
            semver init
          fi

          # Get the base version from semver
          BASE_VERSION=$(semver get release 2>/dev/null || echo "0.1.0")

          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v} # Remove v prefix
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            VERSION="$BASE_VERSION+build.$GIT_SHORT_SHA"
          else
            VERSION="$BASE_VERSION+build.$GIT_SHORT_SHA"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag,pattern={{version}}
            type=ref,event=pr
            type=raw,value=${{ steps.version.outputs.version }}

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
          install-mode: binary

      - name: Format Check
        run: |
          go fmt ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            exit 1
          fi

      - name: Lint
        run: golangci-lint run

      - name: Vet
        run: go vet ./...

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1

      # Note: We use Chainguard actions for melange and apko builds
      # These actions internally handle tool installation

      - name: Install crane
        run: |
          # Install crane (no Chainguard action exists for this)
          CRANE_VERSION=$(curl -s https://api.github.com/repos/google/go-containerregistry/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
          curl -L -o crane.tar.gz https://github.com/google/go-containerregistry/releases/download/v${CRANE_VERSION}/go-containerregistry_Linux_x86_64.tar.gz
          tar -xzf crane.tar.gz crane
          chmod +x crane
          sudo mv crane /usr/local/bin/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create packages directory
        run: |
          mkdir -p ./packages
          echo "Created packages directory:"
          ls -la ./packages

      - name: Build package with melange
        id: melange_build
        uses: chainguard-dev/actions/melange-build@v1.0.8
        with:
          config: melange.yaml
          archs: x86_64,aarch64
          sign-with-temporary-key: true
          signing-key-path: ${{ github.workspace }}/signing.rsa
          repository-path: ./packages
          version: v0.25.1
        env:
          MELANGE_VERSION: ${{ steps.version.outputs.version }}

      - name: Verify melange build output
        if: always()
        run: |
          echo "Melange build status: ${{ steps.melange_build.outcome }}"
          echo "Checking packages directory after melange build:"
          find ./packages -type f | sort || echo "No files found in packages directory"
          # Ensure packages directory exists and has proper permissions
          if [ -d "./packages" ]; then
            chmod -R 755 ./packages
            echo "Set permissions on packages directory"
          else
            echo "Packages directory missing after melange build, recreating:"
            mkdir -p ./packages
            chmod -R 755 ./packages
          fi

      - name: Show files to better debug
        run: ls -la

      - name: Debug packages directory
        run: |
          echo "Content of packages directory (if it exists):"
          ls -la ./packages || echo "packages directory does not exist"
          echo "Content of workspace:"
          ls -la ${{ github.workspace }}
          echo "Checking signing key:"
          ls -la ${{ github.workspace }}/signing.rsa.pub || echo "Signing key not found"
          echo "Checking apko.yaml file:"
          cat apko.yaml

      - name: Build image with apko
        id: apko_build
        uses: chainguard-images/actions/apko-publish@main
        with:
          config: apko.yaml
          tag: ${{ fromJSON(format('["{0}"]', steps.meta.outputs.tags))[0] }}
          keyring-append: ${{ github.workspace }}/signing.rsa.pub
          archs: x86_64,aarch64
          repository-append: ./packages
          sbom-path: ghcr.io/${{ github.repository }}.json
          image_refs: image.tar
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Post-apko debug info
        if: always()
        run: |
          echo "APKO step status: ${{ steps.apko_build.outcome }}"
          echo "Checking if image.tar was created:"
          ls -la image.tar || echo "image.tar not found"
          echo "Checking SBOM file:"
          ls -la ghcr.io/${{ github.repository }}.json || echo "SBOM file not found"
          echo "Checking packages directory again:"
          ls -la ./packages || echo "packages directory does not exist"

      - name: Debug apko failure
        if: failure() && steps.apko_build.outcome == 'failure'
        run: |
          echo "==== APKO BUILD FAILED ===="
          echo "Attempting to debug apko directly..."

          # Install apko manually
          echo "Installing apko using go install..."
          go install chainguard.dev/apko@latest

          # Verify apko installation
          echo "Checking apko installation:"
          which apko || echo "apko not found in PATH"

          # If go install fails, try downloading a binary
          if ! which apko > /dev/null; then
            echo "Trying alternative installation method..."
            mkdir -p apko-debug
            cd apko-debug

            # Get the latest release version
            echo "Fetching latest apko release..."
            APKO_VERSION=$(curl -s https://api.github.com/repos/chainguard-dev/apko/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
            echo "Latest apko version: ${APKO_VERSION}"

            # Download the binary directly
            echo "Downloading apko binary..."
            curl -L -o apko "https://github.com/chainguard-dev/apko/releases/download/v${APKO_VERSION}/apko_${APKO_VERSION}_linux_amd64"
            chmod +x apko
            ./apko version || echo "Failed to run apko version"

            cd ${{ github.workspace }}
          fi

          # Check PATH and GOPATH
          echo "PATH: $PATH"
          echo "GOPATH: $GOPATH"
          echo "GOBIN: $(go env GOBIN)"
          echo "All go binaries: $(ls -la $(go env GOPATH)/bin/ 2>/dev/null || echo 'No binaries found')"

          # Print environment and configuration files
          echo "Environment variables:"
          env | sort

          echo "apko.yaml content:"
          cat ${{ github.workspace }}/apko.yaml

          echo "Keyring file exists:"
          ls -la ${{ github.workspace }}/signing.rsa.pub || echo "Signing key not found"

          # Check content of packages directory
          echo "Packages directory content:"
          find ${{ github.workspace }}/packages -type f | sort || echo "No files found in packages directory"

          # Check permissions on packages directory
          echo "Packages directory permissions:"
          ls -ld ${{ github.workspace }}/packages || echo "Packages directory not found"

          # Create packages directory if it doesn't exist
          if [ ! -d "${{ github.workspace }}/packages" ]; then
            echo "Creating missing packages directory..."
            mkdir -p ${{ github.workspace }}/packages
            chmod -R 755 ${{ github.workspace }}/packages
            echo "Created packages directory. This suggests it was missing during the apko build."
          fi

      - name: Push image
        if: github.event_name != 'pull_request'
        run: |
          # Create an array of docker tags from metadata-action output
          readarray -t DOCKER_TAGS <<< "${{ steps.meta.outputs.tags }}"

          # Get the first tag to use as reference for copying to other tags
          FIRST_TAG=${DOCKER_TAGS[0]}

          # Push the image using the first tag
          crane push image.tar ${FIRST_TAG}

          # Copy the image to all other tags
          for TAG in "${DOCKER_TAGS[@]:1}"; do
            crane copy ${FIRST_TAG} ${TAG}
            echo "Pushed ${TAG}"
          done

          # Explicitly tag as latest if on main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            crane tag ${FIRST_TAG} ghcr.io/${{ github.repository }}:latest
            echo "Tagged as latest"
          fi

      - name: Sign image digest with keyless signing
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          # Get the image digest (immutable content hash)
          # Use the first tag to look up the digest
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)
          IMAGE_DIGEST=$(crane digest ${FIRST_TAG})
          echo "Image digest: ${IMAGE_DIGEST}"

          # Sign the image by digest only (immutable reference)
          IMAGE_REF="ghcr.io/${{ github.repository }}@${IMAGE_DIGEST}"
          echo "Signing image by digest: ${IMAGE_REF}"
          cosign sign "${IMAGE_REF}"

          # Add attestation to the digest reference
          cosign attest --predicate <(cat ghcr.io/${{ github.repository }}.json) "${IMAGE_REF}"

      - name: Verify image signature
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          # Get the image digest (immutable content hash)
          # Use the first tag to look up the digest
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)
          IMAGE_DIGEST=$(crane digest ${FIRST_TAG})

          # Verify only the digest-based signature
          IMAGE_REF="ghcr.io/${{ github.repository }}@${IMAGE_DIGEST}"
          echo "Verifying digest signature: ${IMAGE_REF}"
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@${{ github.ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${IMAGE_REF}"

          # Verify the SBOM attestation
          echo "Verifying SBOM attestation for: ${IMAGE_REF}"
          cosign verify-attestation \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@${{ github.ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --type spdx \
            "${IMAGE_REF}"

      - name: Scan image for vulnerabilities with Trivy
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(format('["{0}"]', steps.meta.outputs.tags))[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: ghcr.io/${{ github.repository }}.json

      - name: Generate GitHub SBOM attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-sbom@v1
        with:
          subject-name: "mbta-mcp-server container image"
          subject-digest: "${{ steps.meta.outputs.digest }}"
          sbom-path: ghcr.io/${{ github.repository }}.json
          attestation-output: sbom-attestation.json

      - name: Upload SBOM attestation
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-attestation
          path: sbom-attestation.json
